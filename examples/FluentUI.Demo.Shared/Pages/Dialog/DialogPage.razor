@page "/Dialog"

@using FluentUI.Demo.Shared.Pages.Dialog.Examples;

<h1>Dialog</h1>

<p>As defined by the <a href="https://w3c.github.io/aria-practices/#dialog_modal" target="_blank" rel="noopener noreferrer">W3C</a>:</p>
<blockquote>
    <p>
        A dialog is a window overlaid on either the primary window or another dialog window. Windows under a modal dialog are inert.
        That is, users cannot interact with content outside an active dialog window. Inert content outside an active dialog is typically visually
        obscured or dimmed so it is difficult to discern, and in some implementations, attempts to interact with the inert content cause the dialog
        to close.
    </p>
    <p>
        Like non-modal dialogs, modal dialogs contain their tab sequence. That is, Tab and Shift + Tab do not move focus outside
        the dialog. However, unlike most non-modal dialogs, modal dialogs do not provide means for moving keyboard focus outside the dialog window
        without closing the dialog.
    </p>
</blockquote>

<p>
    <code>&lt;FluentDialog&gt;</code> wraps the <code>&lt;fluent-dialog&gt;</code> element, a web component implementation of a dialog leveraging
    the Fluent UI design system. It acts as a shell for the dialog content, which can be specified in a number of ways. The dialog is always 
    centered on the screen. To alter the properties of the dialog, use the <code>DialogParameters</code> class.
</p>

<ApiDocumentation Component="typeof(FluentDialog)" />

<ApiDocumentation Component="typeof(DialogParameters<>)" GenericLabel="TData" />

<h2>Examples</h2>

<DemoSection Title="Default" Component="@typeof(DialogDefault)">
    <Description>
        This example shows a simple dialog created by specifying it's content manually (see the Razor tab). Because of this, the dialog is not automatically styled.
        A CSS file has been added to set the width, heigth and padding of the dialog.         
    </Description>
</DemoSection>

<DemoSection Title="Dialog Services" Component="@typeof(DialogServiceExample)" AdditionalFiles="@(new[] {"SimpleDialog.razor"})">
    <Description>
        This example shows how to use the <code>DialogService</code> to show a dialog. The content of the dialog is specified by
        a component which implements <code>IDialogContentComponent&lt;T&gt;</code>. Here that is done in <code>SimpleDialog.razor</code>. The dialog is automatically styled and centered.
    </Description>
</DemoSection>


<DemoSection Title="SimpleDialog as component" Component="@typeof(DialogSimpleDialog)">
    <Description>
        For a components to be useable in a dialog, it just needs to inherit from <code>IDialogContentComponent&lt;T&gt;</code>. 
        They can still be used as a normal component as well. This example shows the <code>SimpleDialog</code> component from the
        previous example being rendered directly in the page.
    </Description>
</DemoSection>
